/*! RemoteSerialPort v0.4.0 | https://github.com/papnkukn/remote-serial-port-client | MIT license */
!function(e){function t(e){function t(e,t,o,n){throw new Error("Not available in this mode!")}var n=this;n.events={};var i={verbose:!1,mode:"http",url:null,userAgent:null};switch(n.options=Object.assign({},i,e||{}),n.options.mode){case"http":if(!n.options.url)throw new Error("Missing required 'url' parameter!");if(!n.options.userAgent&&"function"==typeof require){var a=require("../package.json");n.options.userAgent="RemoteSerialPort/"+a.version}"function"==typeof o.defaults&&o.defaults({headers:{Accept:"application/json","User-Agent":n.options.userAgent}});break;case"udp":case"tcp":if("node"!=r)throw new Error("TCP and UDP sockets are available only in Node.js");var s=new(require("./RemoteSerialPortSocket.js"))(n.options);n.socket=s,n.options=s.options,n.events=s.events,n.emit=s.emit,n.buffer=s.buffer,n.list=t,n.status=t,n.open=function(e,t,o){var n=this;e&&n.options.verbose&&console.warn("Warning: Serial port name is ignored when using a socket!"),t&&n.options.verbose&&console.warn("Warning: Serial port options are ignored when using a socket!"),n.socket.open(o)},n.close=function(e,t){n.socket.close(t)},n.write=function(e,t,o){n.socket.write(t,o)},n.read=function(e,t){n.socket.read(t)},n.clearReadBuffer=function(e,t){n.socket.clearReadBuffer(t)},n.available=function(e,t){n.socket.available(t)},n.bind=t,n.on=s.on;break;default:throw new Error("Unknown mode: "+n.options.mode)}n.emit=function(e,t){var o=n.events[e];"function"==typeof o&&o(t)},n.request=function(e,t){try{o({method:e.method||"GET",url:n.options.url+e.route,headers:e.headers,body:e.body},function(e,o,n){if(t)try{if(e)throw e;var r;try{r=JSON.parse(n)}catch(e){r=n}if(o&&o.statusCode>=400)throw new Error(r.error||"HTTP Status Code "+o.statusCode);t(null,r)}catch(e){t(e)}})}catch(e){t&&t(e)}}}var o,n,r="unknown";if("object"==typeof exports||"function"==typeof define&&define.amd)o=require("request"),n=function(e){var t=new(require("ws"))(e);return t._onevent={},t._delayed=[],t._emit=function(e,o){var n=t._onevent[e];n?o?n(o):n():t._delayed.push({name:e,data:o})},t.on("open",function(){t._emit("open")}),t.on("close",function(){t._emit("close")}),t.on("message",function(e,o){t._emit("read",e)}),t.on("error",function(e){t._emit("error",event)}),t._on=t.on,t.on=function(e,o){if(!t._onevent[e])for(var n=0;t._delayed[n++];){var r=t._delayed[n];r.name==e&&(r.data?o(r.data):o()),t._delayed.splice(n,1),n--}t._onevent[e]=o},t.write=function(e){t.send(e),t._emit("write",e)},t},r="node";else{if("undefined"==typeof jQuery)return console.error("RemoteSerialPort not available in this environment! Hint: try with Node.js or jQuery.");o=function(e,t){var o={cache:!1,type:e.method||"GET",url:e.url||"#",data:e.body,dataType:"json",error:function(e,o,n){t&&t(e.responseJSON,{statusCode:o},null)},success:function(e,o,n){t&&t(null,{statusCode:o},e)}};e.headers&&(o.headers=e.headers),e.headers&&e.headers["Content-Type"]&&(o.contentType=e.headers["Content-Type"]),console.log(o),jQuery.ajax(o)},n=function(t){if(!e.WebSocket)throw new Error("Browser does not support WebSocket!");var o=new e.WebSocket(t);return o.binaryType="arraybuffer",o._onevent={},o._delayed=[],o._emit=function(e,t){var n=o._onevent[e];n?t?n(t):n():o._delayed.push({name:e,data:t})},o.onopen=function(e){o._emit("open")},o.onclose=function(e){o._emit("close")},o.onmessage=function(e){o._emit("read",new Uint8Array(e.data))},o.onerror=function(e){o._emit("error",e)},o._on=o.on,o.on=function(e,t){if(!o._onevent[e])for(var n=0;o._delayed[n++];){var r=o._delayed[n];r.name==e&&(r.data?t(r.data):t()),o._delayed.splice(n,1),n--}o._onevent[e]=t},o.write=function(e){o.send(e),o._emit("write",e)},o},r="jquery"}t.prototype.list=function(e){this.request({method:"GET",route:"api/v1/port"},e)},t.prototype.status=function(e,t){this.request({method:"GET",route:"api/v1/port/"+e},t)},t.prototype.open=function(e,t,o){this.request({method:"POST",route:"api/v1/port/"+e+"/open",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t||{})},o)},t.prototype.close=function(e,t){this.request({method:"POST",route:"api/v1/port/"+e+"/close",headers:{Accept:"application/json"}},t)},t.prototype.write=function(e,t,o){this.request({method:"POST",route:"api/v1/port/"+e+"/write",headers:{Accept:"application/json","Content-Type":"application/octet-stream"},body:t},o)},t.prototype.read=function(e,t){this.request({method:"GET",route:"api/v1/port/"+e+"/read",headers:{Accept:"application/json"}},t)},t.prototype.clearReadBuffer=function(e,t){this.request({method:"DELETE",route:"api/v1/port/"+e+"/read",headers:{Accept:"application/json"}},t)},t.prototype.available=function(e,t){this.request({method:"GET",route:"api/v1/port/"+e+"/available",headers:{Accept:"application/json"}},t)},t.prototype.bind=function(e,t){if(!t)throw new Error("Missing serial port name!");if("data"!=e&&"control"!=e)throw new Error("Only 'data' and 'control' line allowed!");var o=n("ws://localhost:5147/api/v1/port/"+t+"/"+e);return"control"==e&&(o.open=function(e){var t={event:"open",data:e};o.send(JSON.stringify(t)),o._emit("write",e)}),o},t.prototype.on=function(e,t){this.events[e]=t},"object"==typeof exports?module.exports=t:"function"==typeof define&&define.amd?define(function(){return t}):e.RemoteSerialPort=t}(this);